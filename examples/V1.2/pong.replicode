; debug
; a ball bounces between two walls.

;;;;;;;;;;;;;
;; objects ;;

b:(ent 1) [[SYNC_ONCE now 1 forever root nil]]
ball:(ont 1) [[SYNC_ONCE now 0 forever root nil]]
b_is_a_ball:(mk.val b essence ball 1) |[]; (mk.val an_object a_property a_value)
f_b_is_a_ball:(fact b_is_a_ball 0us MAX_TIME 1 1) [[SYNC_AXIOM now 1 forever stdin nil]]

; same pos_y.

s0:(cst |[] []
   (fact (mk.val h: position_y py: :) t0: t1: ::)
   (fact (mk.val w: position_y py: :) t0: t1: ::)
|[]
|[]
[stdin] 1) [[SYNC_ONCE now 0 forever primary nil 0]]

;;;;;;;;;;;;;;;;;;;;;;
;; input generators ;;

; Start program, sets the initial position_y
start:(pgm |[] |[] |[] []
   (inj []
      p:(mk.val b position_y 0 1); the ball "b" starts at position_y=0
      |[]
   )
   (inj []
      (fact p after:(now) (+ after sampling_period) 1 1); p is a fact from now until "now + sampling_period"
      [SYNC_PERIODIC now 1 1 stdin nil]
   )
1) |[]

istart:(ipgm start |[] RUN_ONCE sampling_period VOLATILE SILENT 1) [[SYNC_ONCE now 0 forever stdin nil 1]]

; The main loop, updates the position_y
pgm0:(pgm |[] []
   (ptn f:(fact (mk.val b position_y py: :) after: before: ::) |[])
   (ptn (fact (mk.val b speed_y sy: :) ::) |[])
|[] []
   (inj []
      p:(mk.val b position_y (+ py (* sy sampling_period)) 1)
      |[]
   )
   (inj []
      (fact p (+ after sampling_period) (+ before sampling_period) 1 1)
      [SYNC_PERIODIC (+ f.vw.ijt sampling_period) 1 1 stdin nil]
   )
   (prb [1 "print" "Updating the position: " |[]])
1) |[]

ipgm0:(ipgm pgm0 |[] RUN_ALWAYS 20000us VOLATILE NOTIFY 1) [[SYNC_ONCE now 0 forever stdin nil 1]]

; Turns the ball around when position_y>45
pgm1:(pgm |[] []
   (ptn (fact (mk.val b position_y py: :) ::) [(< py 55) (> py 45)])
|[] []
   (inj []
      s:(mk.val b speed_y -0.0001 1)
      |[]
   )
   (inj []
      (fact s now MAX_TIME 1 1)
      [SYNC_HOLD now 1 forever stdin nil]
   )
1) |[]

ipgm1:(ipgm pgm1 |[] RUN_ALWAYS 0us VOLATILE SILENT 1) [[SYNC_ONCE now 0 forever stdin nil 0]]

; Sets the initial speed and turns the ball around when position_y==0
pgm2:(pgm |[] []
   (ptn (fact (mk.val b position_y 0 :) ::) |[])
|[] []
   (inj []
      s:(mk.val b speed_y 0.0001 1)
      |[]
   )
   (inj []
      (fact s now MAX_TIME 1 1)
      [SYNC_HOLD now 1 forever stdin nil]
   )
1) |[]

ipgm2:(ipgm pgm2 |[] RUN_ONCE 0us VOLATILE SILENT 1) [[SYNC_ONCE now 0 forever stdin nil 1]]

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Debug of the ball position_y ;;

; Constantly injects a new instance of itself to print again
pgm3:(pgm |[] |[] |[] []
   (inj []
      (ins pgm3 |[] RUN_ONCE 50000us VOLATILE SILENT)
      [SYNC_ONCE now 0 forever stdin nil 1]
   )
   (prb [1 "print" "position_y" |[]])
1) |[]

ipgm3:(ipgm pgm3 |[] RUN_ONCE 50000us VOLATILE SILENT 1) [[SYNC_ONCE now 0 1 stdin nil 1]]