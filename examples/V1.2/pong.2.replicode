; as pong, debug combinations of CTPX, GTPX and PTPX; goal-driven.
; a ball travels without walls.

; The views here are structured as [sln ijt sync res grp org], some with an additional psln_thr (saliency change propagation threshold)

;;;;;;;;;;;;;
;; objects ;;

b:(ent 1) [[SYNC_ONCE now 1 forever root nil]]
ball:(ont 1) [[SYNC_ONCE now 0 forever root nil]]
b_is_a_ball:(mk.val b essence ball 1) |[]
f_b_is_a_ball:(fact b_is_a_ball 0us MAX_TIME 1 1) [[SYNC_AXIOM now 1 forever stdin nil]]

red_color:(ont 1) [[SYNC_ONCE now 1 forever root nil]]
blue_color:(ont 1) [[SYNC_ONCE now 1 forever root nil]]

b_is_blue:(mk.val b color blue_color 1) |[]
f_b_is_blue:(fact b_is_blue 0us MAX_TIME 1 1) [[SYNC_HOLD now 1 forever stdin nil]]

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; top-level model and drive injectors ;;
; top-level model
m_run_0:(mdl |[] []
   (fact (mk.val b: position_y : :) t0: t1: ::)
   (fact run t0: t1: ::); drive.
|[]
|[]
[stdin drives] 1 1 1 0 1) [[SYNC_ONCE now 0 forever primary nil 1]]

init_run_pgm:(pgm |[] |[] |[] []
   (inj []
      f_run:(fact run t0:(+ now 50000us) (+ t0 sampling_period) 1 1)
      |[]
   )
   (inj []
      g:(goal f_run self 1)
      |[]
   )
   (inj []
      (fact g t1:(now) t1 1 1)
      [SYNC_ONCE t1 1 forever primary nil]
   )
   (prb [1 "print" "init_run_pgm goal" |[]])
1) |[]

init_run_ipgm:(ipgm init_run_pgm |[] RUN_ONCE 50000us VOLATILE SILENT 1) [[SYNC_ONCE now 0 1 drives nil 1]]

success_run_pgm:(pgm |[] []
   s:(ptn (fact (success (fact (goal (fact run after: before: ::) ::) ::) ::) ::) |[])
|[] []
   (inj []
      f_run:(fact run (+ after sampling_period) (+ before sampling_period) 1 1)
      |[]
   )
   (inj []
      g:(goal f_run self 1)
      |[]
   )
   (inj []
      (fact g t1:(now) t1 1 1)
      [SYNC_ONCE t1 1 forever primary nil]
   )
   (prb [1 "print" "success_run_pgm goal" |[]])
1) |[]

success_run_ipgm:(ipgm success_run_pgm |[] RUN_ALWAYS 0us VOLATILE NOTIFY 1) [[SYNC_ONCE now 0 forever drives nil 1]]

failure_run_pgm:(pgm |[] []
   s:(ptn (|fact (success (fact (goal (fact run after: before: ::) ::) ::) ::) ::) |[])
|[] []
   (inj []
      f_run:(fact run (+ after sampling_period) (+ before sampling_period) 1 1)
      |[]
   )
   (inj []
      g:(goal f_run self 1)
      |[]
   )
   (inj []
      (fact g t1:(now) t1 1 1)
      [SYNC_ONCE t1 1 forever primary nil]
   )
   (prb [1 "print" "failure_run_pgm goal" |[]])
1) |[]

failure_run_ipgm:(ipgm failure_run_pgm |[] RUN_ALWAYS 0us VOLATILE SILENT 1) [[SYNC_ONCE now 0 forever drives nil 1]]

;;;;;;;;;;;;;;;;;;;;;;
;; input generators ;;

; Initialization of the ball position and speed
start:(pgm |[] |[] |[] []
   (inj []
      p:(mk.val b position_y 0 1)
      |[]
   )
   (inj []
      (fact p after:(now) (+ after sampling_period) 1 1)
      [SYNC_PERIODIC now 1 1 stdin nil]
   )
   (inj []
      s:(mk.val b speed_y 0.0001 1)
      |[]
   )
   (inj []
      (fact s now MAX_TIME 1 1)
      [SYNC_HOLD now 1 forever stdin nil]
   )
1) |[]

istart:(ipgm start |[] RUN_ONCE sampling_period VOLATILE SILENT 1) [[SYNC_ONCE now 0 forever stdin nil 1]]

; Update program for the postion and speed of the ball (the main loop)
pgm0:(pgm |[] []
   (ptn f:(fact (mk.val b position_y py: :) after: before: ::) |[])
   (ptn (fact (mk.val b speed_y sy: :) ::) |[])
|[] []
   (inj []
      p:(mk.val b position_y (+ py (* sy sampling_period)) 1)
      |[]
   )
   (inj []
      (fact p (+ after sampling_period) (+ before sampling_period) 1 1)
      [SYNC_PERIODIC (+ f.vw.ijt sampling_period) 1 1 stdin nil]
   )
1) |[]

ipgm0:(ipgm pgm0 |[] RUN_ALWAYS 20000us VOLATILE NOTIFY 1) [[SYNC_ONCE now 0 forever stdin nil 1]]
